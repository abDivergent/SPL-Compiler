#TOKEN_PROTOTYPES
main
_lcd
halt
SmC
RCD
,
proc
userDefinedName
return
:=
(
)
then
else
do
while
until
output
call
LSD
RSD
ShortString
Number
true
false
input
not
and 
or
eq
larger
add
sub
mult
arr
num
string

#GRAMMAR
SPLProgr -> ProcDefs main _lcd Algorithm halt SmC VarDecl RCD
ProcDefs -> 
ProcDefs -> PD , ProcDefs
PD -> proc userDefinedName _lcd ProcDefs Algorithm return SmC VarDecl RCD
Algorithm -> 
Algorithm -> Instr SmC Algorithm
Instr -> Assign
Instr -> Branch
Instr -> Loop
Instr -> PCall
Assign -> LHS := Expr
Branch -> if  ( Expr ) then _lcd Algorithm RCD Alternat
Alternat -> 
Alternat -> else _lcd Algorithm RCD
Loop -> do _lcd Algorithm RCD until  ( Expr )
Loop -> while  ( Expr ) do _lcd Algorithm RCD
LHS -> output
LHS -> Var
LHS -> Field
Expr -> Const
Expr -> Var
Expr -> Field
Expr -> UnOp
Expr -> BinOp
PCall -> call userDefinedName
Var -> userDefinedName
Field -> userDefinedName LSD Var RSD
Field -> userDefinedName LSD Const RSD
Const -> ShortString
Const -> Number
Const -> true
Const -> false
UnOp -> input ( Var )
UnOp -> not ( Expr )
BinOp -> and ( Expr , Expr )
BinOp -> or ( Expr , Expr )
BinOp -> eq ( Expr , Expr )
BinOp -> larger ( Expr , Expr )
BinOp -> add ( Expr , Expr )
BinOp -> sub ( Expr , Expr )
BinOp -> mult ( Expr , Expr )
VarDecl -> 
VarDecl -> Dec SmC VarDecl
Dec -> TYP Var
Dec -> arr TYP LSD Const RSD Var
TYP -> num
TYP -> bool
TYP -> string